{"version":3,"sources":["assets/04.jpg","assets/01.jpg","assets/02.jpg","assets/03.jpg","assets/05.jpg","assets/netflix.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","imageJoueur","nombreAleatoire","Math","floor","random","logoNetflix","src","logo","alt","joueurs","steve","id","stevekerrImg","bill","billImg","dennis","dennisImg","michael","michaelImg","scottie","scottieImg","listeJoueurs","map","element","i","key","listeSecond","buttonChangerJoueur","type","onClick","document","getElementById","style","display","vedette","nomVedette","innerHTML","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,kBCA3CD,EAAOC,QAAU,IAA0B,qC,iHCYvCC,E,gJAFAC,EAAkBC,KAAKC,MAAsB,EAAhBD,KAAKE,UAClCC,EAAc,yBAAKC,IAAKC,IAAMC,IAAI,SAElCC,EAAU,CAEZ,aACA,iBACA,kBACA,iBACA,iBAKIC,EAAQ,yBAAKC,GAAG,aAAaL,IAAKM,IAAcJ,IAAI,eACpDK,EAAO,yBAAKF,GAAG,aAAaL,IAAKQ,IAASN,IAAI,oBAC9CO,EAAS,yBAAKJ,GAAG,aAAaL,IAAKU,IAAWR,IAAI,kBAClDS,EAAU,yBAAKN,GAAG,aAAaL,IAAKY,IAAYV,IAAI,mBACpDW,EAAU,yBAAKR,GAAG,aAAaL,IAAKc,IAAYZ,IAAI,mBAK1D,OAAQC,EAAQR,IAEd,IAAK,aACHD,EAAcU,EACd,MAEF,IAAK,kBACHV,EAAca,EACd,MAEF,IAAK,gBACHb,EAAce,EACd,MAEF,IAAK,iBACHf,EAAciB,EACd,MAEF,IAAK,iBACHjB,EAAcmB,EACd,MAEF,QAEEnB,EAAciB,EAMlB,IAAMI,EAAeZ,EAAQa,KAAI,SAACC,EAASC,GAAV,OAE7B,wBAAIC,IAAK,UAAYD,GAAID,MAQvBG,EAEJ,wBAAIf,GAAG,eAEJX,IAAgBU,GAAS,qCAEzBV,IAAgBa,GAAQ,oCAExBb,IAAgBe,GAAU,sCAE1Bf,IAAgBiB,GAAW,uCAE3BjB,IAAgBmB,GAAW,wCAU1BQ,EAEJ,4BAAQhB,GAAG,mBAAmBiB,KAAK,SAASC,QA6C9C,WAEE5B,EAAkBC,KAAKC,MAAsB,EAAhBD,KAAKE,UAClC0B,SAASC,eAAe,eAAeC,MAAMC,QAAU,OAGvD,IAAIC,EAAUJ,SAASC,eAAe,cAClCI,EAAaL,SAASC,eAAe,cAGzC,OAAQtB,EAAQR,IAEd,IAAK,aACHiC,EAAQ5B,IAAMM,IACduB,EAAWC,UAAY,aACvB,MAEF,IAAK,kBACHF,EAAQ5B,IAAMQ,IACdqB,EAAWC,UAAY,kBACvB,MAEF,IAAK,gBACHF,EAAQ5B,IAAMU,IACdmB,EAAWC,UAAY,gBACvB,MAEF,IAAK,iBACHF,EAAQ5B,IAAMY,IACdiB,EAAWC,UAAY,iBACvB,MAEF,IAAK,iBACHF,EAAQ5B,IAAMc,IACde,EAAWC,UAAY,iBACvB,MAEF,QAEEF,EAAQ5B,IAAMY,IAEdiB,EAAWC,UAAY,oBAtF3B,qBA4FaC,MArFf,WAEE,OAEE,yBAAKC,UAAU,OAEb,4BAAQA,UAAU,cACd,8CAEA,gDAECjC,EAED,iDAEA,wBAAIM,GAAG,cAAcF,EAAQR,IAE5BD,EAEA2B,EAED,oEAEA,4BAAKN,GAEL,iEAECK,KCvHSa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASC,eAAe,SDyHpB,kBAAmBgB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a0412d37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/04.d97a3078.jpg\";","module.exports = __webpack_public_path__ + \"static/media/01.fd9821cd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/02.454112df.jpg\";","module.exports = __webpack_public_path__ + \"static/media/03.1d3d9b23.jpg\";","module.exports = __webpack_public_path__ + \"static/media/05.022db2e4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/netflix.1b904682.png\";","import React from \"react\"; \nimport logo from \"./assets/netflix.png\"; \nimport \"./App.css\"; \nimport stevekerrImg from \"./assets/01.jpg\"; \nimport billImg from \"./assets/02.jpg\"; \nimport dennisImg from \"./assets/03.jpg\"; \nimport michaelImg from \"./assets/04.jpg\"; \nimport scottieImg from \"./assets/05.jpg\"; \n \n\nlet nombreAleatoire = Math.floor(Math.random() * 5); \nlet logoNetflix = <img src={logo} alt=\"logo\" />; \nlet imageJoueur; \nlet joueurs = [ \n\n  \"Steve Kerr\", \n  \"Michael Jordan\", \n  \"Bill Wennington\", \n  \"Scottie Pippen\", \n  \"Dennis Rodman\", \n\n]; \n \n\nconst steve = <img id=\"vedetteImg\" src={stevekerrImg} alt=\"Steve Kerr\" />; \nconst bill = <img id=\"vedetteImg\" src={billImg} alt=\"Bill Wennington\" />; \nconst dennis = <img id=\"vedetteImg\" src={dennisImg} alt=\"Dennis Rodman\" />; \nconst michael = <img id=\"vedetteImg\" src={michaelImg} alt=\"Michael Jordan\" />; \nconst scottie = <img id=\"vedetteImg\" src={scottieImg} alt=\"Scottie Pippen\" />; \n\n\n/* Change la src de l'image pour le joueurs choisi aléatoirement */ \n\nswitch (joueurs[nombreAleatoire]) { \n\n  case \"Steve Kerr\": \n    imageJoueur = steve; \n    break; \n\n  case \"Bill Wennington\": \n    imageJoueur = bill; \n    break; \n\n  case \"Dennis Rodman\": \n    imageJoueur = dennis; \n    break; \n\n  case \"Michael Jordan\": \n    imageJoueur = michael; \n    break; \n\n  case \"Scottie Pippen\": \n    imageJoueur = scottie; \n    break; \n\n  default: \n\n    imageJoueur = michael; \n} \n \n\n/* Crée la liste de joueurs MAP a faire afficher */ \n\nconst listeJoueurs = joueurs.map((element, i) => ( \n\n    <li key={\"element\" + i}>{element}</li> \n\n)); \n\n \n\n/* Crée la liste de joueurs && a faire afficher */ \n\nconst listeSecond = ( \n\n  <ul id=\"listSeconde\"> \n\n    {imageJoueur !== steve && <li>Steve</li>} \n\n    {imageJoueur !== bill && <li>Bill</li>} \n\n    {imageJoueur !== dennis && <li>Dennis</li>} \n\n    {imageJoueur !== michael && <li>Michael</li>} \n\n    {imageJoueur !== scottie && <li>Scottie</li>} \n\n  </ul> \n\n); \n\n\n\n/* Button evennement pour changer de joueur */ \n\nconst buttonChangerJoueur = ( \n\n  <button id=\"changerJoueurBtn\" type=\"button\" onClick={changerJoueur}> \n    Changer de joueur \n  </button> \n\n); \n\n\nfunction App() { \n\n  return ( \n\n    <div className=\"App\"> \n\n      <header className=\"App-header\"> \n          <h1>THE LAST DANCE</h1> \n\n          <p>Une production de</p> \n\n          {logoNetflix} \n\n          <p>Mettant en vedette</p> \n\n          <h2 id=\"nomVedette\">{joueurs[nombreAleatoire]}</h2> \n\n          {imageJoueur} \n\n          {buttonChangerJoueur} \n\n          <h2>Le 5 partants affichés avec MAP()</h2> \n\n          <ul>{listeJoueurs}</ul> \n\n          <h2>Le 4 partants affichés avec &&</h2> \n\n          {listeSecond} \n      </header> \n\n    </div> \n\n  ); \n\n} \n\n \n\nfunction changerJoueur() { \n\n  nombreAleatoire = Math.floor(Math.random() * 5); \n  document.getElementById(\"listSeconde\").style.display = \"none\"; \n\n  /* a changer pour random */ \n  let vedette = document.getElementById(\"vedetteImg\"); \n  let nomVedette = document.getElementById(\"nomVedette\"); \n\n  /* Change la src de l'image pour le joueurs choisi aléatoirement */ \n  switch (joueurs[nombreAleatoire]) { \n\n    case \"Steve Kerr\": \n      vedette.src = stevekerrImg; \n      nomVedette.innerHTML = \"Steve Kerr\"; \n      break; \n\n    case \"Bill Wennington\": \n      vedette.src = billImg; \n      nomVedette.innerHTML = \"Bill Wennington\"; \n      break; \n\n    case \"Dennis Rodman\": \n      vedette.src = dennisImg; \n      nomVedette.innerHTML = \"Dennis Rodman\"; \n      break; \n\n    case \"Michael Jordan\": \n      vedette.src = michaelImg; \n      nomVedette.innerHTML = \"Michael Jordan\"; \n      break; \n\n    case \"Scottie Pippen\": \n      vedette.src = scottieImg; \n      nomVedette.innerHTML = \"Scottie Pippen\"; \n      break; \n\n    default: \n\n      vedette.src = michaelImg; \n\n      nomVedette.innerHTML = \"Michael Jordan\"; \n\n  } \n\n} \n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}